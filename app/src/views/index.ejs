<!DOCTYPE html>
<html lang="ko">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Javaweb profiler</title>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe"
    crossorigin="anonymous"></script>
</head>

<body>
  <div class="container">
    <nav class="navbar navbar-expand-lg fixed-top bg-dark">
      <div class="container">
        <div class="navbar-brand text-white">
          <h1 class="mx-auto"><a href="/" style="color:white;text-decoration:none">Javaweb profiler</a></h1>
        </div>
        <div class="text-white align-right">
          <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#staticBackdrop"
            id="modal">
            How to use?
          </button>
        </div>
      </div>
    </nav>

    <!-- Modal -->
    <div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
      aria-labelledby="staticBackdropLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h1 class="modal-title fs-5" id="staticBackdropLabel">반갑습니다!</h1>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div>Javaweb Profiler를 이용하시려면 <b>단 한가지</b> 준비물이 필요합니다.</div>
            <div>준비물은 바로 Core와 Task가 행과 열 형태로 구성된 데이터 파일입니다.</div>
            <br>
            <div>• 데이터 파일을 파일 탐색기를 통해 선택해주시고, Core의 수, Task의 수를 정확히 입력해주세요</div>
            <br>
            <div>• 입력이 완료되면 제출 버튼을 눌러주시고, 하단에 위치한 차트의 형태를 선택해주세요</div>
            <br>
            <div>• 원하는 차트를 선택하셨다면, 시각화를 원하는 Core 혹은 Task를 선택해주세요.</div>
            <br>
            <div><b style="color:red;">만약 데이터 파일에 오류가 있거나 입력된 Core,Task의 수가 실제 데이터 파일과 일치하지 않는다면 오류가 발생하니, 유의하여 사용해주시기
                바랍니다.</b></div>

          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="button" class="btn btn-primary">Understood</button>
          </div>
        </div>
      </div>
    </div>


    <div class="container" style="margin:100px auto 20px auto;">
      <form action="/" method="POST" enctype="multipart/form-data">
        <div class="input-group">
          <input type="file" class="form-control pe-5 btn-outline-primary" id="inputGroupFile04" name="datafile">
          <input type="number" class="form-control btn-outline-primary" name="coreNum" placeholder="coreNum">
          <input type="number" class="form-control btn-outline-primary" name="taskNum" placeholder="taskNum">
          <button class="btn btn-outline-primary" type="submit" id="inputGroupFileAddon04">Submit</button>
        </div>
      </form>
    </div>

    <div class="container font-monospace">
      <div>
        <canvas id="profiler" class="" style="height: 400px; width: 20px;"></canvas>
      </div>
      <br />
      <div>
        <p class="">select chart :&nbsp;
          <button class="btn btn-primary" id="line">line</button>
          <button class="btn btn-primary" id="bar">bar</button>
          <button class="btn btn-primary" id="polarArea">polarArea</button>
        </p>
      </div>
      <div>
        <p class="">select core &nbsp;:
          <button class="btn" id="coreButtons"></button>
          <br>
        </p>
        <p class="">select task &nbsp;:
          <button class="btn" id="taskButtons"></button>
          <br>
        </p>
      </div>
    </div>

  </div>
  <script>
    const corenum = '<%=data.corenum%>';
    const tasknum = '<%=data.tasknum%>';
    let text = "data visualization!"

    const coreButtons = document.getElementById('coreButtons');
    for (let i = 1; i <= corenum; i++) {
      const button = document.createElement('button');
      button.textContent = `Core ${i}`;
      button.id = `core${i}Button`;
      button.className = 'btn btn-success me-2';
      button.addEventListener('click', function () { spread_data('core', i - 1); });
      coreButtons.appendChild(button);
    }

    const taskButtons = document.getElementById('taskButtons');
    for (let i = 1; i <= tasknum; i++) {
      const button = document.createElement('button');
      button.textContent = `Task ${i}`;
      button.id = `task${i}Button`;
      button.className = 'btn btn-info me-2';
      button.addEventListener('click', function () { spread_data('task', i - 1); });
      taskButtons.appendChild(button);
    }

    document.getElementById('line').addEventListener('click', function () { chart_type = 'line'; });
    document.getElementById('bar').addEventListener('click', function () { chart_type = 'bar'; });
    document.getElementById('polarArea').addEventListener('click', function () { chart_type = 'polarArea'; });

    let chart;
    let chart_type = 'line';

    async function title(type, num) {
      text = await `${type}${num + 1}에 대한 ${typecheck(type)} 분석 결과`;
    }

    async function getData(type, num) {
      let response = await fetch(`/${type}/${num}`);
      let data = await response.json();
      return await data;
    }
    const typecheck = (type) => {
      if (type == 'core') {
        return "task";
      } return "core";
    }

    async function spread_data(type, num) {
      await title(type, num);
      let data = await getData(type, num);
      if (!data) {
        return alert("파일이 입력되지 않았습니다.파일을 넣어주세요",);
      }

      const labels = new Array();
      if (type == 'core') {
        for (var i = 0; i < tasknum; i++) {
          labels.push(`${typecheck(type)}` + `${i + 1}`);
        }
      } else {
        for (var i = 0; i < corenum; i++) {
          labels.push(`${typecheck(type)}` + `${i + 1}`);
        }
      }

      let minData = data.min;
      let maxData = data.max;
      let avgData = data.avg;

      const profiler = document.getElementById('profiler').getContext('2d');

      if (chart) {
        chart.destroy();
      }

      chart = new Chart(profiler, {
        type: `${chart_type}`,
        data: {
          labels: labels,
          datasets: [{
            label: 'Min',
            data: minData,
            borderColor: 'rgba(0, 0, 255, 0.5)',
            backgroundColor: 'rgba(0, 0, 255, 0.5)',
          }, {
            label: 'Max',
            data: maxData,
            borderColor: 'rgba(255, 0, 0, 1)',
            backgroundColor: 'rgba(255, 0, 0, 0.5)',
          }, {
            label: 'Avg',
            data: avgData,
            borderColor: 'rgba(100, 255, 30, 1)',
            backgroundColor: 'rgba(100, 255, 30, 0.5)',
          }]
        },
        options: {
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true
            }
          },
          plugins: {
            title: {
              display: true,
              text: `${text}`,
              font: {
                size: 30
              }
            }
          }
        },
      });
    }
  </script>
</body>

</html>